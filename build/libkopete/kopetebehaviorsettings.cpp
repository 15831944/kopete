// This file is generated by kconfig_compiler from kopetebehaviorsettings.kcfg.
// All changes you do to this file will be lost.

#include "kopetebehaviorsettings.h"

#include <kglobal.h>
#include <QtCore/QFile>

using namespace Kopete;

namespace Kopete {

class BehaviorSettingsHelper
{
  public:
    BehaviorSettingsHelper() : q(0) {}
    ~BehaviorSettingsHelper() { delete q; }
    BehaviorSettings *q;
};
}

K_GLOBAL_STATIC(BehaviorSettingsHelper, s_globalBehaviorSettings)
BehaviorSettings *BehaviorSettings::self()
{
  if (!s_globalBehaviorSettings->q) {
    new BehaviorSettings;
    s_globalBehaviorSettings->q->readConfig();
  }

  return s_globalBehaviorSettings->q;
}

BehaviorSettings::BehaviorSettings(  )
  : KConfigSkeleton( QLatin1String( "kopeterc" ) )
{
  Q_ASSERT(!s_globalBehaviorSettings->q);
  s_globalBehaviorSettings->q = this;
  setCurrentGroup( QLatin1String( "Behavior" ) );

  mStartDockedItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "startDocked" ), mStartDocked, false );
  addItem( mStartDockedItem, QLatin1String( "startDocked" ) );
  mShowSystemTrayItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "showSystemTray" ), mShowSystemTray, true );
  addItem( mShowSystemTrayItem, QLatin1String( "showSystemTray" ) );
  mUseMessageQueueItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "useMessageQueue" ), mUseMessageQueue, true );
  addItem( mUseMessageQueueItem, QLatin1String( "useMessageQueue" ) );
  mQueueUnreadMessagesItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "queueUnreadMessages" ), mQueueUnreadMessages, false );
  addItem( mQueueUnreadMessagesItem, QLatin1String( "queueUnreadMessages" ) );
  mContactListMouseNavigationItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "contactListMouseNavigation" ), mContactListMouseNavigation, false );
  addItem( mContactListMouseNavigationItem, QLatin1String( "contactListMouseNavigation" ) );
  mReconnectOnDisconnectItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "reconnectOnDisconnect" ), mReconnectOnDisconnect, true );
  addItem( mReconnectOnDisconnectItem, QLatin1String( "reconnectOnDisconnect" ) );
  QList<KConfigSkeleton::ItemEnum::Choice2> valuesinitialStatus;
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Offline");
    valuesinitialStatus.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Online");
    valuesinitialStatus.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Away");
    valuesinitialStatus.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Busy");
    valuesinitialStatus.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("Invisible");
    valuesinitialStatus.append( choice );
  }
  mInitialStatusItem = new KConfigSkeleton::ItemEnum( currentGroup(), QLatin1String( "initialStatus" ), mInitialStatus, valuesinitialStatus, EnumInitialStatus::Offline );
  addItem( mInitialStatusItem, QLatin1String( "initialStatus" ) );
  mRaiseMessageWindowItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "raiseMessageWindow" ), mRaiseMessageWindow, false );
  addItem( mRaiseMessageWindowItem, QLatin1String( "raiseMessageWindow" ) );
  mShowEventsItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "showEvents" ), mShowEvents, true );
  addItem( mShowEventsItem, QLatin1String( "showEvents" ) );
  mQueueOnlyHighlightedMessagesInGroupChatsItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "queueOnlyHighlightedMessagesInGroupChats" ), mQueueOnlyHighlightedMessagesInGroupChats, false );
  addItem( mQueueOnlyHighlightedMessagesInGroupChatsItem, QLatin1String( "queueOnlyHighlightedMessagesInGroupChats" ) );
  mQueueOnlyMessagesOnAnotherDesktopItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "queueOnlyMessagesOnAnotherDesktop" ), mQueueOnlyMessagesOnAnotherDesktop, false );
  addItem( mQueueOnlyMessagesOnAnotherDesktopItem, QLatin1String( "queueOnlyMessagesOnAnotherDesktop" ) );
  mBalloonGroupMessageNotificationsPerSenderItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "balloonGroupMessageNotificationsPerSender" ), mBalloonGroupMessageNotificationsPerSender, true );
  addItem( mBalloonGroupMessageNotificationsPerSenderItem, QLatin1String( "balloonGroupMessageNotificationsPerSender" ) );
  mBalloonNotifyIgnoreClosesChatViewItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "balloonNotifyIgnoreClosesChatView" ), mBalloonNotifyIgnoreClosesChatView, false );
  addItem( mBalloonNotifyIgnoreClosesChatViewItem, QLatin1String( "balloonNotifyIgnoreClosesChatView" ) );
  mTrayflashNotifyItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "trayflashNotify" ), mTrayflashNotify, true );
  addItem( mTrayflashNotifyItem, QLatin1String( "trayflashNotify" ) );
  mTrayflashNotifyLeftClickOpensMessageItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "trayflashNotifyLeftClickOpensMessage" ), mTrayflashNotifyLeftClickOpensMessage, true );
  addItem( mTrayflashNotifyLeftClickOpensMessageItem, QLatin1String( "trayflashNotifyLeftClickOpensMessage" ) );
  mAnimateOnMessageWithOpenChatItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "animateOnMessageWithOpenChat" ), mAnimateOnMessageWithOpenChat, true );
  addItem( mAnimateOnMessageWithOpenChatItem, QLatin1String( "animateOnMessageWithOpenChat" ) );
  mTrayflashNotifySetCurrentDesktopToChatViewItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "trayflashNotifySetCurrentDesktopToChatView" ), mTrayflashNotifySetCurrentDesktopToChatView, false );
  addItem( mTrayflashNotifySetCurrentDesktopToChatViewItem, QLatin1String( "trayflashNotifySetCurrentDesktopToChatView" ) );
  mEnableEventsWhileAwayItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "enableEventsWhileAway" ), mEnableEventsWhileAway, true );
  addItem( mEnableEventsWhileAwayItem, QLatin1String( "enableEventsWhileAway" ) );
  QList<KConfigSkeleton::ItemEnum::Choice2> valueschatWindowGroupPolicy;
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("OpenNewWindow");
    valueschatWindowGroupPolicy.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("GroupByAccount");
    valueschatWindowGroupPolicy.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("GroupAll");
    valueschatWindowGroupPolicy.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("GroupByGroup");
    valueschatWindowGroupPolicy.append( choice );
  }
  {
    KConfigSkeleton::ItemEnum::Choice2 choice;
    choice.name = QLatin1String("GroupByMetaContact");
    valueschatWindowGroupPolicy.append( choice );
  }
  mChatWindowGroupPolicyItem = new KConfigSkeleton::ItemEnum( currentGroup(), QLatin1String( "chatWindowGroupPolicy" ), mChatWindowGroupPolicy, valueschatWindowGroupPolicy, EnumChatWindowGroupPolicy::OpenNewWindow );
  addItem( mChatWindowGroupPolicyItem, QLatin1String( "chatWindowGroupPolicy" ) );
  mSpellCheckItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "spellCheck" ), mSpellCheck, true );
  addItem( mSpellCheckItem, QLatin1String( "spellCheck" ) );
  mRichTextByDefaultItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "richTextByDefault" ), mRichTextByDefault, false );
  addItem( mRichTextByDefaultItem, QLatin1String( "richTextByDefault" ) );
  mChatWindowShowSendButtonItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "chatWindowShowSendButton" ), mChatWindowShowSendButton, true );
  addItem( mChatWindowShowSendButtonItem, QLatin1String( "chatWindowShowSendButton" ) );
  mShowDatesItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "showDates" ), mShowDates, false );
  addItem( mShowDatesItem, QLatin1String( "showDates" ) );
  mTruncateContactNameItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "truncateContactName" ), mTruncateContactName, false );
  addItem( mTruncateContactNameItem, QLatin1String( "truncateContactName" ) );
  mTruncateContactNameLengthItem = new KConfigSkeleton::ItemInt( currentGroup(), QLatin1String( "truncateContactNameLength" ), mTruncateContactNameLength, 20 );
  addItem( mTruncateContactNameLengthItem, QLatin1String( "truncateContactNameLength" ) );
  mChatWindowBufferViewSizeItem = new KConfigSkeleton::ItemInt( currentGroup(), QLatin1String( "chatWindowBufferViewSize" ), mChatWindowBufferViewSize, 250 );
  addItem( mChatWindowBufferViewSizeItem, QLatin1String( "chatWindowBufferViewSize" ) );
  mHighlightEnabledItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "highlightEnabled" ), mHighlightEnabled, true );
  addItem( mHighlightEnabledItem, QLatin1String( "highlightEnabled" ) );
  mViewPluginItem = new KConfigSkeleton::ItemString( currentGroup(), QLatin1String( "viewPlugin" ), mViewPlugin, QLatin1String( "kopete_chatwindow" ) );
  addItem( mViewPluginItem, QLatin1String( "viewPlugin" ) );

  setCurrentGroup( QLatin1String( "AutoAway" ) );

  mUseAutoAwayItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "useAutoAway" ), mUseAutoAway, true );
  addItem( mUseAutoAwayItem, QLatin1String( "useAutoAway" ) );
  mAutoAwayTimeoutItem = new KConfigSkeleton::ItemInt( currentGroup(), QLatin1String( "autoAwayTimeout" ), mAutoAwayTimeout, 600 );
  addItem( mAutoAwayTimeoutItem, QLatin1String( "autoAwayTimeout" ) );
  mAutoAwayGoAvailableItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "autoAwayGoAvailable" ), mAutoAwayGoAvailable, true );
  addItem( mAutoAwayGoAvailableItem, QLatin1String( "autoAwayGoAvailable" ) );
  mAutoAwayAskAvailableItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "autoAwayAskAvailable" ), mAutoAwayAskAvailable, false );
  addItem( mAutoAwayAskAvailableItem, QLatin1String( "autoAwayAskAvailable" ) );
  mUseLastAwayMessageItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "useLastAwayMessage" ), mUseLastAwayMessage, true );
  addItem( mUseLastAwayMessageItem, QLatin1String( "useLastAwayMessage" ) );
  mUseCustomAwayMessageItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "useCustomAwayMessage" ), mUseCustomAwayMessage, false );
  addItem( mUseCustomAwayMessageItem, QLatin1String( "useCustomAwayMessage" ) );
  mAutoAwayCustomTitleItem = new KConfigSkeleton::ItemString( currentGroup(), QLatin1String( "autoAwayCustomTitle" ), mAutoAwayCustomTitle, i18n("Away") );
  addItem( mAutoAwayCustomTitleItem, QLatin1String( "autoAwayCustomTitle" ) );
  mAutoAwayCustomMessageItem = new KConfigSkeleton::ItemString( currentGroup(), QLatin1String( "autoAwayCustomMessage" ), mAutoAwayCustomMessage, i18n("I am gone right now, but I will be back later") );
  addItem( mAutoAwayCustomMessageItem, QLatin1String( "autoAwayCustomMessage" ) );

  setCurrentGroup( QLatin1String( "ContactList" ) );

  mSmoothScrollingItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "smoothScrolling" ), mSmoothScrolling, true );
  addItem( mSmoothScrollingItem, QLatin1String( "smoothScrolling" ) );

  setCurrentGroup( QLatin1String( "ChatWindowSettings" ) );

  mAlwaysShowTabsItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "AlwaysShowTabs" ), mAlwaysShowTabs, false );
  addItem( mAlwaysShowTabsItem, QLatin1String( "AlwaysShowTabs" ) );
  mShowContactNameItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "ShowContactName" ), mShowContactName, true );
  addItem( mShowContactNameItem, QLatin1String( "ShowContactName" ) );
  mHoverCloseItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "HoverClose" ), mHoverClose, true );
  addItem( mHoverCloseItem, QLatin1String( "HoverClose" ) );
}

BehaviorSettings::~BehaviorSettings()
{
  if (!s_globalBehaviorSettings.isDestroyed()) {
    s_globalBehaviorSettings->q = 0;
  }
}


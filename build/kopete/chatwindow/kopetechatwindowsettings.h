// This file is generated by kconfig_compiler from kopetechatwindowsettings.kcfg.
// All changes you do to this file will be lost.
#ifndef KOPETECHATWINDOWSETTINGS_H
#define KOPETECHATWINDOWSETTINGS_H

#include <kopete_export.h>

#include <kconfigskeleton.h>
#include <kdebug.h>

#include <kglobalsettings.h>
#include <kcolorscheme.h>
class KOPETECHATWINDOW_SHARED_EXPORT KopeteChatWindowSettings : public KConfigSkeleton
{
  Q_OBJECT
  public:

    enum {
      signalChatwindowAppearanceChanged = 0x1,
      signalMessageOverridesChanged = 0x2,
      signalStyleChanged = 0x4,
      signalStyleVariantChanged = 0x8
 };

    static KopeteChatWindowSettings *self();
    ~KopeteChatWindowSettings();

    /**
      Set Name of a Adium/Kopete chat window style.
    */
    static
    void setStyleName( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "styleName" ) )) {
        self()->mStyleName = v;
        self()->mSettingsChanged |= signalStyleChanged;
      }
    }

    /**
      Get Name of a Adium/Kopete chat window style.
    */
    static
    QString styleName()
    {
      return self()->mStyleName;
    }

    /**
      Get Item object corresponding to styleName()
    */
    ItemString *styleNameItem()
    {
      return mStyleNameItem;
    }

    /**
      Set Relative path to a CSS variant for the current style.
    */
    static
    void setStyleVariant( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "styleVariant" ) ))
        self()->mStyleVariant = v;
    }

    /**
      Get Relative path to a CSS variant for the current style.
    */
    static
    QString styleVariant()
    {
      return self()->mStyleVariant;
    }

    /**
      Get Item object corresponding to styleVariant()
    */
    ItemString *styleVariantItem()
    {
      return mStyleVariantItem;
    }

    /**
      Set Group consecutive messages from the same user as one block.
    */
    static
    void setGroupConsecutiveMessages( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "groupConsecutiveMessages" ) ))
        self()->mGroupConsecutiveMessages = v;
    }

    /**
      Get Group consecutive messages from the same user as one block.
    */
    static
    bool groupConsecutiveMessages()
    {
      return self()->mGroupConsecutiveMessages;
    }

    /**
      Get Item object corresponding to groupConsecutiveMessages()
    */
    ItemBool *groupConsecutiveMessagesItem()
    {
      return mGroupConsecutiveMessagesItem;
    }

    /**
      Set Use a compact variant of the chat style for chatrooms.
    */
    static
    void setUseCompact( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "useCompact" ) ))
        self()->mUseCompact = v;
    }

    /**
      Get Use a compact variant of the chat style for chatrooms.
    */
    static
    bool useCompact()
    {
      return self()->mUseCompact;
    }

    /**
      Get Item object corresponding to useCompact()
    */
    ItemBool *useCompactItem()
    {
      return mUseCompactItem;
    }

    /**
      Set Text color used when highlighting.
    */
    static
    void setHighlightForegroundColor( const QColor & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "highlightForegroundColor" ) )) {
        self()->mHighlightForegroundColor = v;
        self()->mSettingsChanged |= signalChatwindowAppearanceChanged;
      }
    }

    /**
      Get Text color used when highlighting.
    */
    static
    QColor highlightForegroundColor()
    {
      return self()->mHighlightForegroundColor;
    }

    /**
      Get Item object corresponding to highlightForegroundColor()
    */
    ItemColor *highlightForegroundColorItem()
    {
      return mHighlightForegroundColorItem;
    }

    /**
      Set Background color used when highlighting.
    */
    static
    void setHighlightBackgroundColor( const QColor & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "highlightBackgroundColor" ) )) {
        self()->mHighlightBackgroundColor = v;
        self()->mSettingsChanged |= signalChatwindowAppearanceChanged;
      }
    }

    /**
      Get Background color used when highlighting.
    */
    static
    QColor highlightBackgroundColor()
    {
      return self()->mHighlightBackgroundColor;
    }

    /**
      Get Item object corresponding to highlightBackgroundColor()
    */
    ItemColor *highlightBackgroundColorItem()
    {
      return mHighlightBackgroundColorItem;
    }

    /**
      Set Disable custom formatting set by users.
    */
    static
    void setChatFmtOverride( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "chatFmtOverride" ) )) {
        self()->mChatFmtOverride = v;
        self()->mSettingsChanged |= signalMessageOverridesChanged;
      }
    }

    /**
      Get Disable custom formatting set by users.
    */
    static
    bool chatFmtOverride()
    {
      return self()->mChatFmtOverride;
    }

    /**
      Get Item object corresponding to chatFmtOverride()
    */
    ItemBool *chatFmtOverrideItem()
    {
      return mChatFmtOverrideItem;
    }

    /**
      Set Chat text color.
    */
    static
    void setChatTextColor( const QColor & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "chatTextColor" ) )) {
        self()->mChatTextColor = v;
        self()->mSettingsChanged |= signalChatwindowAppearanceChanged;
      }
    }

    /**
      Get Chat text color.
    */
    static
    QColor chatTextColor()
    {
      return self()->mChatTextColor;
    }

    /**
      Get Item object corresponding to chatTextColor()
    */
    ItemColor *chatTextColorItem()
    {
      return mChatTextColorItem;
    }

    /**
      Set Chat background color.
    */
    static
    void setChatBackgroundColor( const QColor & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "chatBackgroundColor" ) )) {
        self()->mChatBackgroundColor = v;
        self()->mSettingsChanged |= signalChatwindowAppearanceChanged;
      }
    }

    /**
      Get Chat background color.
    */
    static
    QColor chatBackgroundColor()
    {
      return self()->mChatBackgroundColor;
    }

    /**
      Get Item object corresponding to chatBackgroundColor()
    */
    ItemColor *chatBackgroundColorItem()
    {
      return mChatBackgroundColorItem;
    }

    /**
      Set Chat link color.
    */
    static
    void setChatLinkColor( const QColor & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "chatLinkColor" ) )) {
        self()->mChatLinkColor = v;
        self()->mSettingsChanged |= signalChatwindowAppearanceChanged;
      }
    }

    /**
      Get Chat link color.
    */
    static
    QColor chatLinkColor()
    {
      return self()->mChatLinkColor;
    }

    /**
      Get Item object corresponding to chatLinkColor()
    */
    ItemColor *chatLinkColorItem()
    {
      return mChatLinkColorItem;
    }

    /**
      Set Chat font.
    */
    static
    void setChatFont( const QFont & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "chatFont" ) )) {
        self()->mChatFont = v;
        self()->mSettingsChanged |= signalChatwindowAppearanceChanged;
      }
    }

    /**
      Get Chat font.
    */
    static
    QFont chatFont()
    {
      return self()->mChatFont;
    }

    /**
      Get Item object corresponding to chatFont()
    */
    ItemFont *chatFontItem()
    {
      return mChatFontItem;
    }


  Q_SIGNALS:
    /**
      Emitted when the font and colors settings have changed.
    */
    void chatwindowAppearanceChanged();

    /**
      Emitted when the message overrides settings have changed.
    */
    void messageOverridesChanged();

    /**
      Emitted when the chat window style has changed.
    */
    void styleChanged(const QString & styleName);

    /**
      Emitted when ChatWindowStyle variant has changed.
    */
    void styleVariantChanged(const QString & styleVariant);

  protected:
    KopeteChatWindowSettings();
    friend class KopeteChatWindowSettingsHelper;

    virtual void usrWriteConfig();

    // Appearance
    QString mStyleName;
    QString mStyleVariant;
    bool mGroupConsecutiveMessages;
    bool mUseCompact;
    QColor mHighlightForegroundColor;
    QColor mHighlightBackgroundColor;
    bool mChatFmtOverride;
    QColor mChatTextColor;
    QColor mChatBackgroundColor;
    QColor mChatLinkColor;
    QFont mChatFont;

  private:
    ItemString *mStyleNameItem;
    ItemString *mStyleVariantItem;
    ItemBool *mGroupConsecutiveMessagesItem;
    ItemBool *mUseCompactItem;
    ItemColor *mHighlightForegroundColorItem;
    ItemColor *mHighlightBackgroundColorItem;
    ItemBool *mChatFmtOverrideItem;
    ItemColor *mChatTextColorItem;
    ItemColor *mChatBackgroundColorItem;
    ItemColor *mChatLinkColorItem;
    ItemFont *mChatFontItem;
    uint mSettingsChanged;
};

#endif


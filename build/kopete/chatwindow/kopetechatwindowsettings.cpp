// This file is generated by kconfig_compiler from kopetechatwindowsettings.kcfg.
// All changes you do to this file will be lost.

#include "kopetechatwindowsettings.h"

#include <kglobal.h>
#include <QtCore/QFile>

class KopeteChatWindowSettingsHelper
{
  public:
    KopeteChatWindowSettingsHelper() : q(0) {}
    ~KopeteChatWindowSettingsHelper() { delete q; }
    KopeteChatWindowSettings *q;
};
K_GLOBAL_STATIC(KopeteChatWindowSettingsHelper, s_globalKopeteChatWindowSettings)
KopeteChatWindowSettings *KopeteChatWindowSettings::self()
{
  if (!s_globalKopeteChatWindowSettings->q) {
    new KopeteChatWindowSettings;
    s_globalKopeteChatWindowSettings->q->readConfig();
  }

  return s_globalKopeteChatWindowSettings->q;
}

KopeteChatWindowSettings::KopeteChatWindowSettings(  )
  : KConfigSkeleton( QLatin1String( "kopeterc" ) )
  , mSettingsChanged(0)
{
  Q_ASSERT(!s_globalKopeteChatWindowSettings->q);
  s_globalKopeteChatWindowSettings->q = this;
  setCurrentGroup( QLatin1String( "Appearance" ) );

  mStyleNameItem = new KConfigSkeleton::ItemString( currentGroup(), QLatin1String( "styleName" ), mStyleName, QLatin1String( "Kopete" ) );
  addItem( mStyleNameItem, QLatin1String( "styleName" ) );
  mStyleVariantItem = new KConfigSkeleton::ItemString( currentGroup(), QLatin1String( "styleVariant" ), mStyleVariant );
  addItem( mStyleVariantItem, QLatin1String( "styleVariant" ) );
  mGroupConsecutiveMessagesItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "groupConsecutiveMessages" ), mGroupConsecutiveMessages, true );
  addItem( mGroupConsecutiveMessagesItem, QLatin1String( "groupConsecutiveMessages" ) );
  mUseCompactItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "useCompact" ), mUseCompact, true );
  addItem( mUseCompactItem, QLatin1String( "useCompact" ) );
  mHighlightForegroundColorItem = new KConfigSkeleton::ItemColor( currentGroup(), QLatin1String( "highlightForegroundColor" ), mHighlightForegroundColor, KColorScheme(QPalette::Active, KColorScheme::Selection).foreground().color() );
  addItem( mHighlightForegroundColorItem, QLatin1String( "highlightForegroundColor" ) );
  mHighlightBackgroundColorItem = new KConfigSkeleton::ItemColor( currentGroup(), QLatin1String( "highlightBackgroundColor" ), mHighlightBackgroundColor, KColorScheme(QPalette::Active, KColorScheme::Selection).background().color() );
  addItem( mHighlightBackgroundColorItem, QLatin1String( "highlightBackgroundColor" ) );
  mChatFmtOverrideItem = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "chatFmtOverride" ), mChatFmtOverride, false );
  addItem( mChatFmtOverrideItem, QLatin1String( "chatFmtOverride" ) );
  mChatTextColorItem = new KConfigSkeleton::ItemColor( currentGroup(), QLatin1String( "chatTextColor" ), mChatTextColor, KColorScheme(QPalette::Active, KColorScheme::View).foreground().color() );
  addItem( mChatTextColorItem, QLatin1String( "chatTextColor" ) );
  mChatBackgroundColorItem = new KConfigSkeleton::ItemColor( currentGroup(), QLatin1String( "chatBackgroundColor" ), mChatBackgroundColor, KColorScheme(QPalette::Active, KColorScheme::View).background().color() );
  addItem( mChatBackgroundColorItem, QLatin1String( "chatBackgroundColor" ) );
  mChatLinkColorItem = new KConfigSkeleton::ItemColor( currentGroup(), QLatin1String( "chatLinkColor" ), mChatLinkColor, KColorScheme(QPalette::Active, KColorScheme::Window).foreground(KColorScheme::LinkText).color() );
  addItem( mChatLinkColorItem, QLatin1String( "chatLinkColor" ) );
  mChatFontItem = new KConfigSkeleton::ItemFont( currentGroup(), QLatin1String( "chatFont" ), mChatFont );
  addItem( mChatFontItem, QLatin1String( "chatFont" ) );
}

KopeteChatWindowSettings::~KopeteChatWindowSettings()
{
  if (!s_globalKopeteChatWindowSettings.isDestroyed()) {
    s_globalKopeteChatWindowSettings->q = 0;
  }
}

void KopeteChatWindowSettings::usrWriteConfig()
{
  KConfigSkeleton::usrWriteConfig();

  if ( mSettingsChanged & signalChatwindowAppearanceChanged ) 
    emit chatwindowAppearanceChanged();

  if ( mSettingsChanged & signalMessageOverridesChanged ) 
    emit messageOverridesChanged();

  if ( mSettingsChanged & signalStyleChanged ) 
    emit styleChanged(mStyleName);

  if ( mSettingsChanged & signalStyleVariantChanged ) 
    emit styleVariantChanged(mStyleVariant);

  mSettingsChanged = 0;
}

#include "kopetechatwindowsettings.moc"


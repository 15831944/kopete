/****************************************************************************
** Meta object code from reading C++ file 'jabberclient.h'
**
** Created by: The Qt Meta Object Compiler version 63 (Qt 4.8.7)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include "../../../protocols/jabber/jabberclient.h"
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'jabberclient.h' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 63
#error "This file was generated using the moc from 4.8.7. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
static const uint qt_meta_data_JabberClient[] = {

 // content:
       6,       // revision
       0,       // classname
       0,    0, // classinfo
      48,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
      22,       // signalCount

 // signals: signature, parameters, type, tag, flags
      14,   13,   13,   13, 0x05,
      26,   13,   13,   13, 0x05,
      50,   44,   13,   13, 0x05,
      63,   13,   13,   13, 0x05,
      82,   80,   13,   13, 0x05,
     133,   13,   13,   13, 0x05,
     161,  156,   13,   13, 0x05,
     200,  192,   13,   13, 0x05,
     233,  228,   13,   13, 0x05,
     262,  228,   13,   13, 0x05,
     295,  228,   13,   13, 0x05,
     341,  328,   13,   13, 0x05,
     385,  328,   13,   13, 0x05,
     439,  431,   13,   13, 0x05,
     474,  470,   13,   13, 0x05,
     501,  470,   13,   13, 0x05,
     537,  526,   13,   13, 0x05,
     596,  579,   13,   13, 0x05,
     643,  634,   13,   13, 0x05,
     675,  431,   13,   13, 0x05,
     701,  697,   13,   13, 0x05,
     722,  697,   13,   13, 0x05,

 // slots: signature, parameters, type, tag, flags
     743,   13,   13,   13, 0x08,
     763,   13,   13,   13, 0x08,
     803,  787,   13,   13, 0x08,
     840,   13,   13,   13, 0x08,
     862,   13,   13,   13, 0x08,
     883,   13,   13,   13, 0x08,
     902,   13,   13,   13, 0x08,
     919,   13,   13,   13, 0x08,
     937,   13,   13,   13, 0x08,
     989,  957,   13,   13, 0x08,
    1033,   13,   13,   13, 0x08,
    1060,   13,   13,   13, 0x08,
    1087,   13,   13,   13, 0x08,
    1118,   13,   13,   13, 0x08,
    1149,   80,   13,   13, 0x08,
    1185,   80,   13,   13, 0x08,
    1223,   13,   13,   13, 0x08,
    1252,  697,   13,   13, 0x08,
    1274,  697,   13,   13, 0x08,
    1299,  697,   13,   13, 0x08,
    1324,  470,   13,   13, 0x08,
    1349,  470,   13,   13, 0x08,
    1372,  526,   13,   13, 0x08,
    1406,  579,   13,   13, 0x08,
    1442,  634,   13,   13, 0x08,
    1472,   13,   13,   13, 0x08,

       0        // eod
};

static const char qt_meta_stringdata_JabberClient[] = {
    "JabberClient\0\0connected()\0csAuthenticated()\0"
    "error\0csError(int)\0csDisconnected()\0"
    ",\0tlsWarning(QCA::TLS::IdentityResult,QCA::Validity)\0"
    "incomingFileTransfer()\0code\0"
    "error(JabberClient::ErrorCode)\0success\0"
    "rosterRequestFinished(bool)\0item\0"
    "newContact(XMPP::RosterItem)\0"
    "contactDeleted(XMPP::RosterItem)\0"
    "contactUpdated(XMPP::RosterItem)\0"
    "jid,resource\0resourceAvailable(XMPP::Jid,XMPP::Resource)\0"
    "resourceUnavailable(XMPP::Jid,XMPP::Resource)\0"
    "message\0messageReceived(XMPP::Message)\0"
    "jid\0groupChatJoined(XMPP::Jid)\0"
    "groupChatLeft(XMPP::Jid)\0jid,status\0"
    "groupChatPresence(XMPP::Jid,XMPP::Status)\0"
    "jid,error,reason\0groupChatError(XMPP::Jid,int,QString)\0"
    "jid,type\0subscription(XMPP::Jid,QString)\0"
    "debugMessage(QString)\0msg\0"
    "incomingXML(QString)\0outgoingXML(QString)\0"
    "slotS5BServerGone()\0slotUpdatePenaltyTime()\0"
    "user,pass,realm\0slotCSNeedAuthParams(bool,bool,bool)\0"
    "slotCSAuthenticated()\0slotCSDisconnected()\0"
    "slotCSWarning(int)\0slotCSError(int)\0"
    "slotCSConnected()\0slotTLSHandshaken()\0"
    "success,statusCode,statusString\0"
    "slotRosterRequestFinished(bool,int,QString)\0"
    "slotIncomingFileTransfer()\0"
    "slotNewContact(RosterItem)\0"
    "slotContactDeleted(RosterItem)\0"
    "slotContactUpdated(RosterItem)\0"
    "slotResourceAvailable(Jid,Resource)\0"
    "slotResourceUnavailable(Jid,Resource)\0"
    "slotReceivedMessage(Message)\0"
    "slotPsiDebug(QString)\0slotIncomingXML(QString)\0"
    "slotOutgoingXML(QString)\0"
    "slotGroupChatJoined(Jid)\0"
    "slotGroupChatLeft(Jid)\0"
    "slotGroupChatPresence(Jid,Status)\0"
    "slotGroupChatError(Jid,int,QString)\0"
    "slotSubscription(Jid,QString)\0"
    "slotSessionStarted()\0"
};

void JabberClient::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        Q_ASSERT(staticMetaObject.cast(_o));
        JabberClient *_t = static_cast<JabberClient *>(_o);
        switch (_id) {
        case 0: _t->connected(); break;
        case 1: _t->csAuthenticated(); break;
        case 2: _t->csError((*reinterpret_cast< int(*)>(_a[1]))); break;
        case 3: _t->csDisconnected(); break;
        case 4: _t->tlsWarning((*reinterpret_cast< QCA::TLS::IdentityResult(*)>(_a[1])),(*reinterpret_cast< QCA::Validity(*)>(_a[2]))); break;
        case 5: _t->incomingFileTransfer(); break;
        case 6: _t->error((*reinterpret_cast< JabberClient::ErrorCode(*)>(_a[1]))); break;
        case 7: _t->rosterRequestFinished((*reinterpret_cast< bool(*)>(_a[1]))); break;
        case 8: _t->newContact((*reinterpret_cast< const XMPP::RosterItem(*)>(_a[1]))); break;
        case 9: _t->contactDeleted((*reinterpret_cast< const XMPP::RosterItem(*)>(_a[1]))); break;
        case 10: _t->contactUpdated((*reinterpret_cast< const XMPP::RosterItem(*)>(_a[1]))); break;
        case 11: _t->resourceAvailable((*reinterpret_cast< const XMPP::Jid(*)>(_a[1])),(*reinterpret_cast< const XMPP::Resource(*)>(_a[2]))); break;
        case 12: _t->resourceUnavailable((*reinterpret_cast< const XMPP::Jid(*)>(_a[1])),(*reinterpret_cast< const XMPP::Resource(*)>(_a[2]))); break;
        case 13: _t->messageReceived((*reinterpret_cast< const XMPP::Message(*)>(_a[1]))); break;
        case 14: _t->groupChatJoined((*reinterpret_cast< const XMPP::Jid(*)>(_a[1]))); break;
        case 15: _t->groupChatLeft((*reinterpret_cast< const XMPP::Jid(*)>(_a[1]))); break;
        case 16: _t->groupChatPresence((*reinterpret_cast< const XMPP::Jid(*)>(_a[1])),(*reinterpret_cast< const XMPP::Status(*)>(_a[2]))); break;
        case 17: _t->groupChatError((*reinterpret_cast< const XMPP::Jid(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< const QString(*)>(_a[3]))); break;
        case 18: _t->subscription((*reinterpret_cast< const XMPP::Jid(*)>(_a[1])),(*reinterpret_cast< const QString(*)>(_a[2]))); break;
        case 19: _t->debugMessage((*reinterpret_cast< const QString(*)>(_a[1]))); break;
        case 20: _t->incomingXML((*reinterpret_cast< const QString(*)>(_a[1]))); break;
        case 21: _t->outgoingXML((*reinterpret_cast< const QString(*)>(_a[1]))); break;
        case 22: _t->slotS5BServerGone(); break;
        case 23: _t->slotUpdatePenaltyTime(); break;
        case 24: _t->slotCSNeedAuthParams((*reinterpret_cast< bool(*)>(_a[1])),(*reinterpret_cast< bool(*)>(_a[2])),(*reinterpret_cast< bool(*)>(_a[3]))); break;
        case 25: _t->slotCSAuthenticated(); break;
        case 26: _t->slotCSDisconnected(); break;
        case 27: _t->slotCSWarning((*reinterpret_cast< int(*)>(_a[1]))); break;
        case 28: _t->slotCSError((*reinterpret_cast< int(*)>(_a[1]))); break;
        case 29: _t->slotCSConnected(); break;
        case 30: _t->slotTLSHandshaken(); break;
        case 31: _t->slotRosterRequestFinished((*reinterpret_cast< bool(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< const QString(*)>(_a[3]))); break;
        case 32: _t->slotIncomingFileTransfer(); break;
        case 33: _t->slotNewContact((*reinterpret_cast< const RosterItem(*)>(_a[1]))); break;
        case 34: _t->slotContactDeleted((*reinterpret_cast< const RosterItem(*)>(_a[1]))); break;
        case 35: _t->slotContactUpdated((*reinterpret_cast< const RosterItem(*)>(_a[1]))); break;
        case 36: _t->slotResourceAvailable((*reinterpret_cast< const Jid(*)>(_a[1])),(*reinterpret_cast< const Resource(*)>(_a[2]))); break;
        case 37: _t->slotResourceUnavailable((*reinterpret_cast< const Jid(*)>(_a[1])),(*reinterpret_cast< const Resource(*)>(_a[2]))); break;
        case 38: _t->slotReceivedMessage((*reinterpret_cast< const Message(*)>(_a[1]))); break;
        case 39: _t->slotPsiDebug((*reinterpret_cast< const QString(*)>(_a[1]))); break;
        case 40: _t->slotIncomingXML((*reinterpret_cast< const QString(*)>(_a[1]))); break;
        case 41: _t->slotOutgoingXML((*reinterpret_cast< const QString(*)>(_a[1]))); break;
        case 42: _t->slotGroupChatJoined((*reinterpret_cast< const Jid(*)>(_a[1]))); break;
        case 43: _t->slotGroupChatLeft((*reinterpret_cast< const Jid(*)>(_a[1]))); break;
        case 44: _t->slotGroupChatPresence((*reinterpret_cast< const Jid(*)>(_a[1])),(*reinterpret_cast< const Status(*)>(_a[2]))); break;
        case 45: _t->slotGroupChatError((*reinterpret_cast< const Jid(*)>(_a[1])),(*reinterpret_cast< int(*)>(_a[2])),(*reinterpret_cast< const QString(*)>(_a[3]))); break;
        case 46: _t->slotSubscription((*reinterpret_cast< const Jid(*)>(_a[1])),(*reinterpret_cast< const QString(*)>(_a[2]))); break;
        case 47: _t->slotSessionStarted(); break;
        default: ;
        }
    }
}

const QMetaObjectExtraData JabberClient::staticMetaObjectExtraData = {
    0,  qt_static_metacall 
};

const QMetaObject JabberClient::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_JabberClient,
      qt_meta_data_JabberClient, &staticMetaObjectExtraData }
};

#ifdef Q_NO_DATA_RELOCATION
const QMetaObject &JabberClient::getStaticMetaObject() { return staticMetaObject; }
#endif //Q_NO_DATA_RELOCATION

const QMetaObject *JabberClient::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->metaObject : &staticMetaObject;
}

void *JabberClient::qt_metacast(const char *_clname)
{
    if (!_clname) return 0;
    if (!strcmp(_clname, qt_meta_stringdata_JabberClient))
        return static_cast<void*>(const_cast< JabberClient*>(this));
    return QObject::qt_metacast(_clname);
}

int JabberClient::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 48)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 48;
    }
    return _id;
}

// SIGNAL 0
void JabberClient::connected()
{
    QMetaObject::activate(this, &staticMetaObject, 0, 0);
}

// SIGNAL 1
void JabberClient::csAuthenticated()
{
    QMetaObject::activate(this, &staticMetaObject, 1, 0);
}

// SIGNAL 2
void JabberClient::csError(int _t1)
{
    void *_a[] = { 0, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 2, _a);
}

// SIGNAL 3
void JabberClient::csDisconnected()
{
    QMetaObject::activate(this, &staticMetaObject, 3, 0);
}

// SIGNAL 4
void JabberClient::tlsWarning(QCA::TLS::IdentityResult _t1, QCA::Validity _t2)
{
    void *_a[] = { 0, const_cast<void*>(reinterpret_cast<const void*>(&_t1)), const_cast<void*>(reinterpret_cast<const void*>(&_t2)) };
    QMetaObject::activate(this, &staticMetaObject, 4, _a);
}

// SIGNAL 5
void JabberClient::incomingFileTransfer()
{
    QMetaObject::activate(this, &staticMetaObject, 5, 0);
}

// SIGNAL 6
void JabberClient::error(JabberClient::ErrorCode _t1)
{
    void *_a[] = { 0, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 6, _a);
}

// SIGNAL 7
void JabberClient::rosterRequestFinished(bool _t1)
{
    void *_a[] = { 0, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 7, _a);
}

// SIGNAL 8
void JabberClient::newContact(const XMPP::RosterItem & _t1)
{
    void *_a[] = { 0, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 8, _a);
}

// SIGNAL 9
void JabberClient::contactDeleted(const XMPP::RosterItem & _t1)
{
    void *_a[] = { 0, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 9, _a);
}

// SIGNAL 10
void JabberClient::contactUpdated(const XMPP::RosterItem & _t1)
{
    void *_a[] = { 0, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 10, _a);
}

// SIGNAL 11
void JabberClient::resourceAvailable(const XMPP::Jid & _t1, const XMPP::Resource & _t2)
{
    void *_a[] = { 0, const_cast<void*>(reinterpret_cast<const void*>(&_t1)), const_cast<void*>(reinterpret_cast<const void*>(&_t2)) };
    QMetaObject::activate(this, &staticMetaObject, 11, _a);
}

// SIGNAL 12
void JabberClient::resourceUnavailable(const XMPP::Jid & _t1, const XMPP::Resource & _t2)
{
    void *_a[] = { 0, const_cast<void*>(reinterpret_cast<const void*>(&_t1)), const_cast<void*>(reinterpret_cast<const void*>(&_t2)) };
    QMetaObject::activate(this, &staticMetaObject, 12, _a);
}

// SIGNAL 13
void JabberClient::messageReceived(const XMPP::Message & _t1)
{
    void *_a[] = { 0, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 13, _a);
}

// SIGNAL 14
void JabberClient::groupChatJoined(const XMPP::Jid & _t1)
{
    void *_a[] = { 0, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 14, _a);
}

// SIGNAL 15
void JabberClient::groupChatLeft(const XMPP::Jid & _t1)
{
    void *_a[] = { 0, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 15, _a);
}

// SIGNAL 16
void JabberClient::groupChatPresence(const XMPP::Jid & _t1, const XMPP::Status & _t2)
{
    void *_a[] = { 0, const_cast<void*>(reinterpret_cast<const void*>(&_t1)), const_cast<void*>(reinterpret_cast<const void*>(&_t2)) };
    QMetaObject::activate(this, &staticMetaObject, 16, _a);
}

// SIGNAL 17
void JabberClient::groupChatError(const XMPP::Jid & _t1, int _t2, const QString & _t3)
{
    void *_a[] = { 0, const_cast<void*>(reinterpret_cast<const void*>(&_t1)), const_cast<void*>(reinterpret_cast<const void*>(&_t2)), const_cast<void*>(reinterpret_cast<const void*>(&_t3)) };
    QMetaObject::activate(this, &staticMetaObject, 17, _a);
}

// SIGNAL 18
void JabberClient::subscription(const XMPP::Jid & _t1, const QString & _t2)
{
    void *_a[] = { 0, const_cast<void*>(reinterpret_cast<const void*>(&_t1)), const_cast<void*>(reinterpret_cast<const void*>(&_t2)) };
    QMetaObject::activate(this, &staticMetaObject, 18, _a);
}

// SIGNAL 19
void JabberClient::debugMessage(const QString & _t1)
{
    void *_a[] = { 0, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 19, _a);
}

// SIGNAL 20
void JabberClient::incomingXML(const QString & _t1)
{
    void *_a[] = { 0, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 20, _a);
}

// SIGNAL 21
void JabberClient::outgoingXML(const QString & _t1)
{
    void *_a[] = { 0, const_cast<void*>(reinterpret_cast<const void*>(&_t1)) };
    QMetaObject::activate(this, &staticMetaObject, 21, _a);
}
QT_END_MOC_NAMESPACE

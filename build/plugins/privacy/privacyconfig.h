// This file is generated by kconfig_compiler from privacyconfig.kcfg.
// All changes you do to this file will be lost.
#ifndef PRIVACYCONFIG_H
#define PRIVACYCONFIG_H

#include <kopete_export.h>

#include <kconfigskeleton.h>
#include <kdebug.h>

class KOPETEPRIVACY_EXPORT PrivacyConfig : public KConfigSkeleton
{
  public:

    static PrivacyConfig *self();
    ~PrivacyConfig();

    /**
      Set Allow everyone to send you messages.
    */
    static
    void setSender_AllowAll( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "Sender_AllowAll" ) ))
        self()->mSender_AllowAll = v;
    }

    /**
      Get Allow everyone to send you messages.
    */
    static
    bool sender_AllowAll()
    {
      return self()->mSender_AllowAll;
    }

    /**
      Set Allow nobody to send you messages, except the contacts on the whitelist.
    */
    static
    void setSender_AllowNoneButWhiteList( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "Sender_AllowNoneButWhiteList" ) ))
        self()->mSender_AllowNoneButWhiteList = v;
    }

    /**
      Get Allow nobody to send you messages, except the contacts on the whitelist.
    */
    static
    bool sender_AllowNoneButWhiteList()
    {
      return self()->mSender_AllowNoneButWhiteList;
    }

    /**
      Set Allow everyone to send you messages, except the contacts on the blacklist.
    */
    static
    void setSender_AllowAllButBlackList( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "Sender_AllowAllButBlackList" ) ))
        self()->mSender_AllowAllButBlackList = v;
    }

    /**
      Get Allow everyone to send you messages, except the contacts on the blacklist.
    */
    static
    bool sender_AllowAllButBlackList()
    {
      return self()->mSender_AllowAllButBlackList;
    }

    /**
      Set Allow everyone to send you messages, except the contacts on the blacklist.
    */
    static
    void setSender_AllowNoneButContactList( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "Sender_AllowNoneButContactList" ) ))
        self()->mSender_AllowNoneButContactList = v;
    }

    /**
      Get Allow everyone to send you messages, except the contacts on the blacklist.
    */
    static
    bool sender_AllowNoneButContactList()
    {
      return self()->mSender_AllowNoneButContactList;
    }

    /**
      Set Contacts on the whitelist.
    */
    static
    void setWhiteList( const QStringList & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "WhiteList" ) ))
        self()->mWhiteList = v;
    }

    /**
      Get Contacts on the whitelist.
    */
    static
    QStringList whiteList()
    {
      return self()->mWhiteList;
    }

    /**
      Set Contacts on the blacklist.
    */
    static
    void setBlackList( const QStringList & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "BlackList" ) ))
        self()->mBlackList = v;
    }

    /**
      Get Contacts on the blacklist.
    */
    static
    QStringList blackList()
    {
      return self()->mBlackList;
    }

    /**
      Set Drop messages that contain at least one of the following words.
    */
    static
    void setContent_DropIfAny( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "Content_DropIfAny" ) ))
        self()->mContent_DropIfAny = v;
    }

    /**
      Get Drop messages that contain at least one of the following words.
    */
    static
    bool content_DropIfAny()
    {
      return self()->mContent_DropIfAny;
    }

    /**
      Set Words to look for.
    */
    static
    void setDropIfAny( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "DropIfAny" ) ))
        self()->mDropIfAny = v;
    }

    /**
      Get Words to look for.
    */
    static
    QString dropIfAny()
    {
      return self()->mDropIfAny;
    }

    /**
      Set Drop messages that contain all of the following words.
    */
    static
    void setContent_DropIfAll( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "Content_DropIfAll" ) ))
        self()->mContent_DropIfAll = v;
    }

    /**
      Get Drop messages that contain all of the following words.
    */
    static
    bool content_DropIfAll()
    {
      return self()->mContent_DropIfAll;
    }

    /**
      Set Words to look for.
    */
    static
    void setDropIfAll( const QString & v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "DropIfAll" ) ))
        self()->mDropIfAll = v;
    }

    /**
      Get Words to look for.
    */
    static
    QString dropIfAll()
    {
      return self()->mDropIfAll;
    }

  protected:
    PrivacyConfig();
    friend class PrivacyConfigHelper;


    // Privacy Plugin
    bool mSender_AllowAll;
    bool mSender_AllowNoneButWhiteList;
    bool mSender_AllowAllButBlackList;
    bool mSender_AllowNoneButContactList;
    QStringList mWhiteList;
    QStringList mBlackList;
    bool mContent_DropIfAny;
    QString mDropIfAny;
    bool mContent_DropIfAll;
    QString mDropIfAll;

  private:
};

#endif


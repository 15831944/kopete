// This file is generated by kconfig_compiler from privacyconfig.kcfg.
// All changes you do to this file will be lost.

#include "privacyconfig.h"

#include <kglobal.h>
#include <QtCore/QFile>

class PrivacyConfigHelper
{
  public:
    PrivacyConfigHelper() : q(0) {}
    ~PrivacyConfigHelper() { delete q; }
    PrivacyConfig *q;
};
K_GLOBAL_STATIC(PrivacyConfigHelper, s_globalPrivacyConfig)
PrivacyConfig *PrivacyConfig::self()
{
  if (!s_globalPrivacyConfig->q) {
    new PrivacyConfig;
    s_globalPrivacyConfig->q->readConfig();
  }

  return s_globalPrivacyConfig->q;
}

PrivacyConfig::PrivacyConfig(  )
  : KConfigSkeleton( QLatin1String( "kopeterc" ) )
{
  Q_ASSERT(!s_globalPrivacyConfig->q);
  s_globalPrivacyConfig->q = this;
  setCurrentGroup( QLatin1String( "Privacy Plugin" ) );

  KConfigSkeleton::ItemBool  *itemSender_AllowAll;
  itemSender_AllowAll = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "Sender_AllowAll" ), mSender_AllowAll, true );
  addItem( itemSender_AllowAll, QLatin1String( "Sender_AllowAll" ) );
  KConfigSkeleton::ItemBool  *itemSender_AllowNoneButWhiteList;
  itemSender_AllowNoneButWhiteList = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "Sender_AllowNoneButWhiteList" ), mSender_AllowNoneButWhiteList, false );
  addItem( itemSender_AllowNoneButWhiteList, QLatin1String( "Sender_AllowNoneButWhiteList" ) );
  KConfigSkeleton::ItemBool  *itemSender_AllowAllButBlackList;
  itemSender_AllowAllButBlackList = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "Sender_AllowAllButBlackList" ), mSender_AllowAllButBlackList, false );
  addItem( itemSender_AllowAllButBlackList, QLatin1String( "Sender_AllowAllButBlackList" ) );
  KConfigSkeleton::ItemBool  *itemSender_AllowNoneButContactList;
  itemSender_AllowNoneButContactList = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "Sender_AllowNoneButContactList" ), mSender_AllowNoneButContactList, false );
  addItem( itemSender_AllowNoneButContactList, QLatin1String( "Sender_AllowNoneButContactList" ) );
  KConfigSkeleton::ItemStringList  *itemWhiteList;
  itemWhiteList = new KConfigSkeleton::ItemStringList( currentGroup(), QLatin1String( "WhiteList" ), mWhiteList );
  addItem( itemWhiteList, QLatin1String( "WhiteList" ) );
  KConfigSkeleton::ItemStringList  *itemBlackList;
  itemBlackList = new KConfigSkeleton::ItemStringList( currentGroup(), QLatin1String( "BlackList" ), mBlackList );
  addItem( itemBlackList, QLatin1String( "BlackList" ) );
  KConfigSkeleton::ItemBool  *itemContent_DropIfAny;
  itemContent_DropIfAny = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "Content_DropIfAny" ), mContent_DropIfAny, false );
  addItem( itemContent_DropIfAny, QLatin1String( "Content_DropIfAny" ) );
  KConfigSkeleton::ItemString  *itemDropIfAny;
  itemDropIfAny = new KConfigSkeleton::ItemString( currentGroup(), QLatin1String( "DropIfAny" ), mDropIfAny );
  addItem( itemDropIfAny, QLatin1String( "DropIfAny" ) );
  KConfigSkeleton::ItemBool  *itemContent_DropIfAll;
  itemContent_DropIfAll = new KConfigSkeleton::ItemBool( currentGroup(), QLatin1String( "Content_DropIfAll" ), mContent_DropIfAll, false );
  addItem( itemContent_DropIfAll, QLatin1String( "Content_DropIfAll" ) );
  KConfigSkeleton::ItemString  *itemDropIfAll;
  itemDropIfAll = new KConfigSkeleton::ItemString( currentGroup(), QLatin1String( "DropIfAll" ), mDropIfAll );
  addItem( itemDropIfAll, QLatin1String( "DropIfAll" ) );
}

PrivacyConfig::~PrivacyConfig()
{
  if (!s_globalPrivacyConfig.isDestroyed()) {
    s_globalPrivacyConfig->q = 0;
  }
}


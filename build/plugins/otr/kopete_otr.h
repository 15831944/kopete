// This file is generated by kconfig_compiler from kopete_otr.kcfg.
// All changes you do to this file will be lost.
#ifndef KOPETEOTRKCFG_H
#define KOPETEOTRKCFG_H

#include <kconfigskeleton.h>
#include <kdebug.h>

class KopeteOtrKcfg : public KConfigSkeleton
{
  public:

    static KopeteOtrKcfg *self();
    ~KopeteOtrKcfg();

    /**
      Set Always encrypt outgoing messages
    */
    static
    void setRbAlways( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "rbAlways" ) ))
        self()->mRbAlways = v;
    }

    /**
      Get Always encrypt outgoing messages
    */
    static
    bool rbAlways()
    {
      return self()->mRbAlways;
    }

    /**
      Get Item object corresponding to rbAlways()
    */
    ItemBool *rbAlwaysItem()
    {
      return mRbAlwaysItem;
    }

    /**
      Set Automatically encrypt messages if the other side supports OTR
    */
    static
    void setRbOpportunistic( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "rbOpportunistic" ) ))
        self()->mRbOpportunistic = v;
    }

    /**
      Get Automatically encrypt messages if the other side supports OTR
    */
    static
    bool rbOpportunistic()
    {
      return self()->mRbOpportunistic;
    }

    /**
      Get Item object corresponding to rbOpportunistic()
    */
    ItemBool *rbOpportunisticItem()
    {
      return mRbOpportunisticItem;
    }

    /**
      Set Encrypt messages if the other side requests an OTR connection
    */
    static
    void setRbManual( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "rbManual" ) ))
        self()->mRbManual = v;
    }

    /**
      Get Encrypt messages if the other side requests an OTR connection
    */
    static
    bool rbManual()
    {
      return self()->mRbManual;
    }

    /**
      Get Item object corresponding to rbManual()
    */
    ItemBool *rbManualItem()
    {
      return mRbManualItem;
    }

    /**
      Set Never encrypt outgoing messages
    */
    static
    void setRbNever( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1( "rbNever" ) ))
        self()->mRbNever = v;
    }

    /**
      Get Never encrypt outgoing messages
    */
    static
    bool rbNever()
    {
      return self()->mRbNever;
    }

    /**
      Get Item object corresponding to rbNever()
    */
    ItemBool *rbNeverItem()
    {
      return mRbNeverItem;
    }

  protected:
    KopeteOtrKcfg();
    friend class KopeteOtrKcfgHelper;


    // Policy
    bool mRbAlways;
    bool mRbOpportunistic;
    bool mRbManual;
    bool mRbNever;

  private:
    ItemBool *mRbAlwaysItem;
    ItemBool *mRbOpportunisticItem;
    ItemBool *mRbManualItem;
    ItemBool *mRbNeverItem;
};

#endif

